var app = angular.module('app', ["ngResource", 'ngCookies', 'ngRoute', 'ui.bootstrap', 'ui.select',
 'ngSanitize', 'xeditable', 'toaster', 'ngAnimate', 'textAngular' , 'ngFileUpload']);

app.config(function ($httpProvider, $resourceProvider) {
  $httpProvider.defaults.xsrfCookieName = 'csrftoken';
  $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';
  $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
  $resourceProvider.defaults.stripTrailingSlashes = false;
});

app.run(['$http', '$cookies', function($http, $cookies) {
  $http.defaults.headers.common['X-CSRFToken'] = $cookies['csrftoken'];
}]);

app.run( function($rootScope, $location) {
    $rootScope.$on( "$routeChangeStart", function(event, next, current) {
      if ( $rootScope.loggedUser === null ) {
          $location.path( "/login/" );
      }         
    });
 })

app.run(function(editableOptions) {
  editableOptions.theme = 'bs3';
});

// muestra cuanto tiempo paso desde una fecha
app.filter('moment', function() {
    return function(dateString, format) {
        return moment(dateString).format(format);
	};
});

// convierte en html seguro
app.filter('rawHtml', ['$sce', function($sce){
  return function(val) {
    return $sce.trustAsHtml(val);
  };
}]);

app.filter('lastWord', ['$sce', function($sce){
  return function(txt) {
	if(txt){
		var txtCut = txt.split("/"); 
	    return txtCut[txtCut.length-1];
	}else{
		return false;	
	}
  };
}]);

app.config(function(uiSelectConfig) {
  uiSelectConfig.theme = 'bootstrap';
  uiSelectConfig.resetSearchInput = true;
  uiSelectConfig.appendToBody = true;
});

// rutas
app.config(function($routeProvider) {
  $routeProvider
    .when('/', {
      templateUrl : 'taskList.html',
      controller  : 'taskController'
    })

    .when('/task/:taskId/', {
      templateUrl : 'taskDetail.html',
      controller  : 'commentsController'
    })

    .when('/taskhistory/', {
      templateUrl : 'taskHistory.html',
      controller  : 'taskHController'
    })

    .when('/todo/', {
      templateUrl : 'todo.html',
      controller  : 'todoController'
    })

    .when('/client/', {
      templateUrl : 'templates/client.html',
      controller  : 'clientController'
    })

    .when('/messages/', {
      templateUrl : 'messages.html',
      controller  : 'messagesController'
    })

    .when('/login/', {
      templateUrl : 'login.html',
      controller  : 'loginController'
    })

    .when('/test/:taskId/', {
      templateUrl : 'templates/test.html',
      controller  : 'commentsController'
    })

    .otherwise({
      redirectTo: '/login/'
    });
});

// directiva para calendario
app.directive('jqdatepicker', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
         link: function (scope, element, attrs, ngModelCtrl) {
            element.datepicker({
                dateFormat: 'yy-mm-dd',
                onSelect: function (date) {
                    scope.date = date;
                    scope.$apply();
                }
            });
        }
    };
});

app.directive('ngConfirmClick', [
  function(){
    return {
      link: function (scope, element, attr) {
        var msg = attr.ngConfirmClick || "Desea confirmar la accion?";
        var clickAction = attr.confirmedClick;
        element.bind('click',function (event) {
          if ( window.confirm(msg) ) {
              scope.$eval(clickAction)
          }
        });
      }
    };
}])

app.directive('fileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;

            element.bind('change', function(){
                scope.$apply(function(){
                    modelSetter(scope, element[0].files[0]);
                });
            });
        }
    };
}]);

app.directive('flatStyle', [function() {
  return {
    restrict: 'A',
    link: function(scope, element) {
      $(element).iCheck({
            checkboxClass: 'icheckbox_flat-green',
            radioClass: 'iradio_flat-green'
      });
    }
  };
}]);

app.service('fileUpload', ['$http', function ($http) {
    this.uploadFileToUrl = function(taskId, userId, comment, file, uploadUrl){
        var fd = new FormData();
        fd.append('task', taskId);
        fd.append('user', userId);
        fd.append('comment', comment);
        
        if(file){
          fd.append('docfile', file);  
        }
        
        $http.post(uploadUrl, fd, {
            transformRequest: angular.identity,
            headers: {'Content-Type': undefined}
        })
        .success(function(){
        })
        .error(function(){
        });
    }
}]);

// Factoriza los resource para obtener datos de la api de django
app.factory('moduleResource', function ($resource) {
  return $resource('/module/:id', {id:'@id'},
    {
      'query':  {method:'GET', isArray:true},
    });
});

app.factory('urgencyResource', function ($resource) {
  return $resource('/urgency/:id', {id:'@id'},
    {
      'query':  {method:'GET', isArray:true},
    });
});

app.factory('statusResource', function ($resource) {
  return $resource('/status/:id', {id:'@id'},
    {
      'query':  {method:'GET', isArray:true},
    });
});

app.factory('taskResource', function ($resource) {
  return $resource('/task/:id', {id:'@id'},
    {
      'get':    {method:'GET', isArray:false},
      'save':   {method:'POST'},
      'update': {method:'PATCH'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.factory('organizationResource', function ($resource) {
  return $resource('/organization/:id', {id:'@id'},
    {
      'get':    {method:'GET', isArray:false},
      'save':   {method:'POST'},
      'update': {method:'PUT'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.factory('notificationResource', function ($resource) {
  return $resource('/notification/:id', {id:'@id'},
    {
      'get':    {method:'GET'},
      'save':   {method:'POST'},
      'update': {method:'PUT'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'},
      'markAsRead': { method: 'POST', isArray: true }
    });
});

app.factory('taskCommentsResource', function ($resource) {
  return $resource('/taskComment/:id', {id:'@id'},
    {
      'get':    {method:'GET'},
      'save':   {method:'POST'},
      'update': {method:'PUT'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.factory('taskCommentsResource2', function ($resource) {
  return $resource('/taskComment2/:id', {id:'@id'},
    {
      'get':    {method:'GET'},
      'save':   {method:'POST',
		transformRequest: angular.identity,
		headers: {'Content-Type': undefined}
		},
      'update': {method:'PUT'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.factory('clientResource', function ($resource) {
  return $resource('/client/:id', {id:'@id'},
    {
      'get':    {method:'GET'},
      'save':   {method:'POST'},
      'update': {method:'PUT'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.factory('todoResource', function ($resource) {
  return $resource('/todo/:id', {id:'@id'},
    {
      'get':    {method:'GET'},
      'save':   {method:'POST'},
      'update': {method:'PUT'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.factory('loginResource', function ($resource) {
  return $resource('/auth/login/:id', {id:'@id'},
    {
      'get':    {method:'GET', isArray:false},
      'save':   {method:'POST'},
      'update': {method:'PUT'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.controller('taskController', function ($scope, taskResource, clientResource, $uibModal, $location, $timeout, statusResource, moduleResource, urgencyResource) {

  $scope.vm = {
    done : '',
    client : ''
  };

  // obtiene las tareas
  function getTasks() {
    $scope.tasks = taskResource.query({ done: 'False'});
  }
  getTasks();

  // marca como realizada la tarea
  $scope.doneTask = function(taskId) {
    taskResource.get({ taskId:taskId }, function(task) {
      task.done = true;
      taskResource.update({ taskId:task.id }, task);
    });
    getTasks();
  };

  // borra la tarea
  $scope.deleteTask = function(taskId) {
    taskResource.delete({ id : taskId });
    $timeout(getTasks, 500);
  };

  // obtiene todos los clientes
  getClients = function() {
    clientResource.query({}, function(data){
      all = {
        id : '',
        name : 'Todos',
        lastname : '',
        organization : 0
      }
      data.unshift(all);
      $scope.clients = data;
    });
  };
  getClients();

  // carga select con clientes
  clientResource.query({}, function(data){
    $scope.clientsM = data;
  });

  // carga select con estados
  statusResource.query({}, function(data){
    $scope.Tstatus = data;
  });

  // carga select con modulos
  moduleResource.query({}, function(data){
    $scope.modules = data;
  });
  
  urgencyResource.query({}, function(data){
    $scope.urgency = data;
  });

  // crea tarea
  $scope.newTask = function() {
    $scope.task.user = 1;
    taskResource.save($scope.task);
    $scope.task = null;
    $('#myModal').modal('hide');
    $timeout(getTasks, 500);
  };
})

app.controller('taskHController', function ($scope, taskResource, clientResource) {

  $scope.vm = {
    done : '',
    client : ''
  };

  // obtiene las tareas
  function getTasks() {
    $scope.tasks = taskResource.query({ done : 'True'});
  }
  getTasks();

  // obtiene todos los clientes
  getClients = function() {
    clientResource.query({}, function(data){
      all = {
        id : '',
        name : 'Todos',
        lastname : '',
        organization : 0
      }
      data.unshift(all);
      $scope.clients = data;
    });
  };
  getClients();
})

app.controller('commentsController', function ($scope, taskCommentsResource, $routeParams, taskResource, 
  notificationResource, taskCommentsResource2, $timeout, $location, toaster, fileUpload) {
  // numero de pagina inicial para paginador
  $scope.currentPage = 1;

  // obtiene el id de la tarea desde la url y la convierte a int
  var taskId = parseInt($routeParams.taskId, 10);

  // obtiene comentarios de la tarea seleccionada
  function getComments(){
   taskCommentsResource.get({ task : taskId }, function(data){
      $scope.allComments = data.results;    
      $scope.totalItems = data.count;
    })
  };
  getComments();

  // cuando cambia la pagina , setea numero de pagina en la consulta y actualiza los resultados
  $scope.pageChanged = function() {
    taskCommentsResource.get({ task : taskId , page : $scope.currentPage}, function(data){
      $scope.allComments = data.results;    
    })
  };

  // crea nuevo comentario
  $scope.newComment = function () {

  	var file = $scope.cm.docfile;
  	var userId = 1;
  	var comment = $scope.cm.comment;
  	var uploadUrl = "/taskComment2/";
  	fileUpload.uploadFileToUrl(taskId, userId, comment, file, uploadUrl);


    // limpia formulario
    $scope.cm = null;

    // notifica al usuario
    var nt = new notificationResource;
    nt.user = 1;
    nt.ntype = "comentario";
    nt.notification = taskId;
    nt.$save();
    $timeout(getComments, 500);


  };

  $scope.deleteComment = function (commentId) {
    taskCommentsResource.delete({id : commentId})
    $timeout(getComments, 500);
  };  

  // obtengo tarea actual
  cTask = taskResource.get({ id : taskId }, function(task){
    $scope.task = task;   
  });

  // actualiza tarea actual
  $scope.updateTask = function(){
    cTask = $scope.task;
    cTask.$update();
  };
  
  // borra tarea actual
  $scope.deleteTask = function(){
    if (confirm("Esta seguro de borrar la tarea ?")) {
      cTask = $scope.task;
      cTask.$delete();
      $location.path( "/" );
      toaster.pop('success', 'Tarea', 'La tarea se borro correctamente.');
    }
  };

  // cierra tarea actual
  $scope.doneTask = function(){
    if (confirm("Esta seguro de cerrar la tarea ?")) {
      cTask = $scope.task;
      taskResource.update(
        {id: cTask.id, done: true}
      );

      $location.path( "/" );
      $scope.tasks = taskResource.query({ done: 'False'});
      toaster.pop('success', 'Tarea', 'La tarea se cerro correctamente.');
    }
  };

  // Lista de adjuntos
  attList = taskCommentsResource.get({ task : taskId }, function(data){
    $scope.allComments = data.results;    
    $scope.totalItems = data.count;
  })
})

app.controller('mainController', function ($scope, notificationResource, $timeout, $http, $rootScope, $location) {
  // obtiene todas las notificaciones
  getAllNotifications = function() {
    notificationResource.get({read: 'False'}, function(data){
      $scope.countNotification = data.count;
      $scope.notifications = data.results;
    });
  };
  getAllNotifications();

  // marca todas como leidas
  $scope.markAsRead = function(all){
    all.forEach(function(data) {
      data.read = true;
      notificationResource.update({id : data.id}, data);
    });
    $timeout(getAllNotifications, 500);
  };

  $scope.logout = function() {
    $http.post('http://localhost:8000/auth/logout/')
    .then(function(){
      $rootScope.loggedUser = null;
      $rootScope.username = '';
      $rootScope.idUser = 0;
      $location.path( "/login/" );
    })
  };
})

app.controller('todoController', function ($scope, todoResource, $timeout, $routeParams) {
  // lista de mis tareas, si lleva taskId lista solo checkist de una tarea especifica
  var taskId = parseInt($routeParams.taskId)
  getTodoTask = function() {
    if(taskId){
      todoResource.query({user: 1, task : taskId}, function(data){
        $scope.todoTasks = data;
      });
    }else{
      todoResource.query({user: 1, task : null}, function(data){
        $scope.todoTasks = data;
      });
    }
  };
  getTodoTask();

  // agrega tarea al usuario
  $scope.addTodo = function () {
    var td = new todoResource;

    // para diferenciar tareas individuales
    if(taskId){
      td.task = taskId;
    };

    td.description = $scope.description;
    td.user = 1;
    td.$save();
    $timeout(getTodoTask, 500);

    //limpia campo descripcion de tarea
    $scope.description = null;
  }

  // borra tarea al usuario
  $scope.deleteTodo = function (todoId) {
    todoResource.get({id: todoId}, function(data){
      todoResource.delete({id : data.id});
      $timeout(getTodoTask, 500);
    });
  }

  // marca tarea como realizada
  $scope.doneTodo = function (todoId) {
    var td = todoResource.get({id : todoId}, function(data){
      var td = data;
      td.done = !td.done;
      td.$update();
      $timeout(getTodoTask, 500);
    });
  }
})

app.controller('clientController', function ($scope, clientResource, organizationResource) {
  // organizacion seleccionada
  $scope.vm = {
    selectedOrg : null,
    selectedClient : null
  };
  
  // setea organizacion para filtrar
  $scope.setOrganization = function(id) {  
    $scope.org = id;
  }

  // obtiene todas las organizaciones
  getOrganizations = function() {
    organizationResource.query({}, function(data){
      $scope.organizations = data;
    });
  };
  getOrganizations();

  // obtiene todos los clientes
  getClients = function() {
    clientResource.query({}, function(data){
      $scope.clients = data;
    });
  };
  getClients();
  
  // obtiene el cliente seleccionado
  $scope.getClient = function(id) {
    clientResource.get({id}, function(data){
      $scope.client = data;
    });
  };
})

app.controller('loginController', ['$scope', '$http', '$rootScope', '$location', function ($scope, $http, $rootScope, $location) {
  $scope.usr = {};
  $scope.submit = function() {
    var data = {
            username : $scope.usr.username,
            password : $scope.usr.password
          };
    $http.post('http://localhost:8000/auth/login/', data)
    .then(function(result){
      $http.defaults.headers.common.Authorization = 'Token ' + result.data.auth_token;
      $http.get('http://localhost:8000/auth/me/').then(function(user){
        $rootScope.loggedUser = true;
        $rootScope.username = user.data.username;
        $rootScope.idUser = user.data.id;
      })
      $location.path( "/" );
    },function() {
      $rootScope.loggedUser = null;
      $rootScope.username = '';
      $rootScope.idUser = 0;
    });
  };




}]);


app.controller('customerModalCtrl', 
 ['$scope', '$modalInstance', 'task', 
 function ($scope, $uibModalInstance, task) {

    $scope.customer = task;

    if (task.CustomerId > 0)
        $scope.headerTitle = 'Edit Customer';
    else
        $scope.headerTitle = 'Add Customer';

    $scope.save = function () {

    };

    $scope.cancel = function () {
        $modalInstance.dismiss('cancel');
    };
}]); 


app.provider('taskProvider', function UnicornLauncherProvider() {
  var useTinfoilShielding = false;

  this.useTinfoilShielding = function(value) {
    useTinfoilShielding = !!value;
  };

  this.$get = ["apiToken", function unicornLauncherFactory(apiToken) {

    // let's assume that the UnicornLauncher constructor was also changed to
    // accept and use the useTinfoilShielding argument
    return new UnicornLauncher(apiToken, useTinfoilShielding);
  }];
});